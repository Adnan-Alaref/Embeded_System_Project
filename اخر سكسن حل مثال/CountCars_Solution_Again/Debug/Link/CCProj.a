;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;void EE_Write(unsigned int address,unsigned char data);
;unsigned char EE_Read(unsigned int address);
;void main(void)
; 0000 0017 {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 0018 DDRB.0=0;
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 0019 PORTB.0=1;
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 001A 
; 0000 001B DDRD.2=0;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 001C PORTD.2=1;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 001D 
; 0000 001E lcd_init(16);
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 001F //-----INT0 configuration
; 0000 0020 bit_set(MCUCR,1);         //Falling edge for external interrupt0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0021 bit_set(GICR,6);
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0022 #asm("sei")
;PCODE: $0000001E VOL: 0
; 0000 0023 
; 0000 0024 
; 0000 0025 while (1)
;PCODE: $0000001F VOL: 0
; 0000 0026 {
; 0000 0027 
; 0000 0028 if (operation == 0)
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0029 {
; 0000 002A lcd_clear();
;PCODE: $00000022 VOL: 0
; 0000 002B lcd_puts("Press start!");
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 002C }
; 0000 002D else
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 002E {
; 0000 002F lcd_clear();
;PCODE: $00000028 VOL: 0
; 0000 0030 lcd_printf("Cars passed=%u",TCNT0);
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0031 lcd_gotoxy(0,1);
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0032 lcd_printf("Mins=%u Secs=%u",mins,secs);
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0033 }
;PCODE: $00000044 VOL: 0
; 0000 0034 }
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0035 }
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0

	.DSEG
_0xF:
	.BYTE 0xD
;interrupt [2] void ext_int0 (void)
; 0000 0038 {

	.CSEG
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0039 operation = 1;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 003A TCCR0= 0b00000110;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 003B TCCR2= 0b00000101;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 003C bit_set(ASSR,3);
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 003D bit_set(TIMSK,6);
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 003E 
; 0000 003F }
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;interrupt [5] void T2_OV (void)
; 0000 0042 {
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0043 secs++;
;PCODE: $0000005D VOL: 0
; 0000 0044 if (secs == 60)
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0045 {
; 0000 0046 secs = 0;
;PCODE: $00000061 VOL: 0
; 0000 0047 mins++;
;PCODE: $00000062 VOL: 0
; 0000 0048 }
; 0000 0049 if (mins == 60)
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 004A {
; 0000 004B mins = 0;
;PCODE: $00000067 VOL: 0
; 0000 004C hours++;
;PCODE: $00000068 VOL: 0
; 0000 004D TCCR0=0;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 004E TCCR2=0;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 004F lcd_clear();
;PCODE: $0000006D VOL: 0
; 0000 0050 lcd_printf("Total Cars=%u",TCNT0);
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0051 delay_ms(20000);
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0052 EE_Write(hours,TCNT0);
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 0053 TCNT0=0;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 0054 operation = 0;
;PCODE: $00000082 VOL: 0
; 0000 0055 
; 0000 0056 }
; 0000 0057 }
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;void EE_Write(unsigned int address,unsigned char data)
; 0000 005B {
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 005C while(EECR.1 == 1);
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;	address -> R18,R19
;	data -> R17
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 005D EEAR = address;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 005E EEDR = data;
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 005F EECR.2=1;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 0060 EECR.1=1;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 0061 }
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;unsigned char EE_Read(unsigned int address)
; 0000 0064 {
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 0065 while(EECR.1 == 1);
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;	address -> R16,R17
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 0066 EEAR = address;
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 0067 EECR.0 = 1;
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 0068 return EEDR;
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 0069 }
;PCODE: $000000B1 VOL: 0
