
AVRASM ver. 2.1.30  C:\Users\Lost Heaven\Google Drive\Embedded Systems (AVR)\Communications\Sections-2019\Section-3\Keypad\Debug\List\Keypad.asm Mon Oct 14 13:57:17 2019

C:\Users\Lost Heaven\Google Drive\Embedded Systems (AVR)\Communications\Sections-2019\Section-3\Keypad\Debug\List\Keypad.asm(1095): warning: Register r5 already defined by the .DEF directive
C:\Users\Lost Heaven\Google Drive\Embedded Systems (AVR)\Communications\Sections-2019\Section-3\Keypad\Debug\List\Keypad.asm(1096): warning: Register r4 already defined by the .DEF directive
C:\Users\Lost Heaven\Google Drive\Embedded Systems (AVR)\Communications\Sections-2019\Section-3\Keypad\Debug\List\Keypad.asm(1097): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.32 Evaluation
                 ;(C) Copyright 1998-2017 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R5
                 	.DEF __lcd_y=R4
                 	.DEF __lcd_maxx=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 003a 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x0:
000033 7525
C:\Users\Lost Heaven\Google Drive\Embedded Systems (AVR)\Communications\Sections-2019\Section-3\Keypad\Debug\List\Keypad.asm(1135): warning: .cseg .db misalignment - padding zero byte
000034 0000      	.DB  0x25,0x75,0x0
                 _0x2000003:
000035 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000036 0002      	.DW  0x02
000037 0160      	.DW  __base_y_G100
000038 006a      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000039 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00003a 94f8      	CLI
00003b 27ee      	CLR  R30
00003c bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00003d e0f1      	LDI  R31,1
00003e bffb      	OUT  GICR,R31
00003f bfeb      	OUT  GICR,R30
000040 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000041 e08d      	LDI  R24,(14-2)+1
000042 e0a2      	LDI  R26,2
000043 27bb      	CLR  R27
                 __CLEAR_REG:
000044 93ed      	ST   X+,R30
000045 958a      	DEC  R24
000046 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000047 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000048 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000049 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00004a 93ed      	ST   X+,R30
00004b 9701      	SBIW R24,1
00004c f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00004d e6ec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00004e e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00004f 9185      	LPM  R24,Z+
000050 9195      	LPM  R25,Z+
000051 9700      	SBIW R24,0
000052 f061      	BREQ __GLOBAL_INI_END
000053 91a5      	LPM  R26,Z+
000054 91b5      	LPM  R27,Z+
000055 9005      	LPM  R0,Z+
000056 9015      	LPM  R1,Z+
000057 01bf      	MOVW R22,R30
000058 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000059 9005      	LPM  R0,Z+
00005a 920d      	ST   X+,R0
00005b 9701      	SBIW R24,1
00005c f7e1      	BRNE __GLOBAL_INI_LOOP
00005d 01fb      	MOVW R30,R22
00005e cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00005f e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000060 bfed      	OUT  SPL,R30
000061 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000062 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000063 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000064 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000065 940c 0067 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*
                 ; * Keypad.c
                 ; *
                 ; * Created: 14/10/2019 1:35:59 PM
                 ; * Author: Lost Heaven
                 ; */
                 ;
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <alcd.h>
                 ;unsigned char keypad();
                 ;void main(void)
                 ; 0000 000C {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 000D unsigned char number = 0;
                 ; 0000 000E DDRC  = 0b00000111;
                 ;	number -> R17
000067 e010      	LDI  R17,0
000068 e0e7      	LDI  R30,LOW(7)
000069 bbe4      	OUT  0x14,R30
                 ; 0000 000F PORTC = 0b11111000;
00006a efe8      	LDI  R30,LOW(248)
00006b bbe5      	OUT  0x15,R30
                 ; 0000 0010 lcd_init(16);
00006c e1a0      	LDI  R26,LOW(16)
00006d d0bf      	RCALL _lcd_init
                 ; 0000 0011 while (1)
                 _0x3:
                 ; 0000 0012     {
                 ; 0000 0013     number = keypad();
00006e d00f      	RCALL _keypad
00006f 2f1e      	MOV  R17,R30
                 ; 0000 0014     lcd_printf("%u",number);
                +
000070 e6e6     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
000071 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
000072 93fa      	ST   -Y,R31
000073 93ea      	ST   -Y,R30
000074 2fe1      	MOV  R30,R17
000075 27ff      	CLR  R31
000076 2766      	CLR  R22
000077 2777      	CLR  R23
000078 d295      	RCALL __PUTPARD1
000079 e084      	LDI  R24,4
00007a d211      	RCALL _lcd_printf
00007b 9626      	ADIW R28,6
                 ; 0000 0015 
                 ; 0000 0016     }
00007c cff1      	RJMP _0x3
                 ; 0000 0017 }
                 _0x6:
00007d cfff      	RJMP _0x6
                 ; .FEND
                 ;
                 ;
                 ;unsigned char keypad()
                 ; 0000 001B {
                 _keypad:
                 ; .FSTART _keypad
                 ; 0000 001C   while(1)
                 _0x7:
                 ; 0000 001D   {
                 ; 0000 001E    PORTC.0 = 0; //C0 is on, C1 and C2 are off
00007e 98a8      	CBI  0x15,0
                 ; 0000 001F    PORTC.1 = 1;
00007f 9aa9      	SBI  0x15,1
                 ; 0000 0020    PORTC.2 = 1;
000080 9aaa      	SBI  0x15,2
                 ; 0000 0021 
                 ; 0000 0022    switch (PINC)
000081 b3e3      	IN   R30,0x13
                 ; 0000 0023           {
                 ; 0000 0024           case 0b11110110 :
000082 3fe6      	CPI  R30,LOW(0xF6)
000083 f429      	BRNE _0x13
                 ; 0000 0025           while(PINC.3 == 0);  // While the button is pressed, Wait!
                 _0x14:
000084 9b9b      	SBIS 0x13,3
000085 cffe      	RJMP _0x14
                 ; 0000 0026           return 1;
000086 e0e1      	LDI  R30,LOW(1)
000087 9508      	RET
                 ; 0000 0027           break;
000088 c014      	RJMP _0x12
                 ; 0000 0028 
                 ; 0000 0029           case 0b11101110 :
                 _0x13:
000089 3eee      	CPI  R30,LOW(0xEE)
00008a f429      	BRNE _0x17
                 ; 0000 002A           while(PINC.4 == 0);  // While the button is pressed, Wait!
                 _0x18:
00008b 9b9c      	SBIS 0x13,4
00008c cffe      	RJMP _0x18
                 ; 0000 002B           return 4;
00008d e0e4      	LDI  R30,LOW(4)
00008e 9508      	RET
                 ; 0000 002C           break;
00008f c00d      	RJMP _0x12
                 ; 0000 002D 
                 ; 0000 002E           case 0b11011110 :
                 _0x17:
000090 3dee      	CPI  R30,LOW(0xDE)
000091 f429      	BRNE _0x1B
                 ; 0000 002F           while(PINC.5 == 0);  // While the button is pressed, Wait!
                 _0x1C:
000092 9b9d      	SBIS 0x13,5
000093 cffe      	RJMP _0x1C
                 ; 0000 0030           return 7;
000094 e0e7      	LDI  R30,LOW(7)
000095 9508      	RET
                 ; 0000 0031           break;
000096 c006      	RJMP _0x12
                 ; 0000 0032 
                 ; 0000 0033           case 0b10111110 :
                 _0x1B:
000097 3bee      	CPI  R30,LOW(0xBE)
000098 f421      	BRNE _0x12
                 ; 0000 0034           while(PINC.6 == 0);  // While the button is pressed, Wait!
                 _0x20:
000099 9b9e      	SBIS 0x13,6
00009a cffe      	RJMP _0x20
                 ; 0000 0035           return '*';
00009b e2ea      	LDI  R30,LOW(42)
00009c 9508      	RET
                 ; 0000 0036           break;
                 ; 0000 0037           }
                 _0x12:
                 ; 0000 0038 
                 ; 0000 0039    PORTC.0 = 1; //C1 is on, C0 and C2 are off
00009d 9aa8      	SBI  0x15,0
                 ; 0000 003A    PORTC.1 = 0;
00009e 98a9      	CBI  0x15,1
                 ; 0000 003B    PORTC.2 = 1;
00009f 9aaa      	SBI  0x15,2
                 ; 0000 003C 
                 ; 0000 003D    switch (PINC)
0000a0 b3e3      	IN   R30,0x13
                 ; 0000 003E           {
                 ; 0000 003F           case 0b11110101 :
0000a1 3fe5      	CPI  R30,LOW(0xF5)
0000a2 f429      	BRNE _0x2C
                 ; 0000 0040           while(PINC.3 == 0);  // While the button is pressed, Wait!
                 _0x2D:
0000a3 9b9b      	SBIS 0x13,3
0000a4 cffe      	RJMP _0x2D
                 ; 0000 0041           return 2;
0000a5 e0e2      	LDI  R30,LOW(2)
0000a6 9508      	RET
                 ; 0000 0042           break;
0000a7 c014      	RJMP _0x2B
                 ; 0000 0043 
                 ; 0000 0044           case 0b11101101 :
                 _0x2C:
0000a8 3eed      	CPI  R30,LOW(0xED)
0000a9 f429      	BRNE _0x30
                 ; 0000 0045           while(PINC.4 == 0);  // While the button is pressed, Wait!
                 _0x31:
0000aa 9b9c      	SBIS 0x13,4
0000ab cffe      	RJMP _0x31
                 ; 0000 0046           return 5;
0000ac e0e5      	LDI  R30,LOW(5)
0000ad 9508      	RET
                 ; 0000 0047           break;
0000ae c00d      	RJMP _0x2B
                 ; 0000 0048 
                 ; 0000 0049           case 0b11011101 :
                 _0x30:
0000af 3ded      	CPI  R30,LOW(0xDD)
0000b0 f429      	BRNE _0x34
                 ; 0000 004A           while(PINC.5 == 0);  // While the button is pressed, Wait!
                 _0x35:
0000b1 9b9d      	SBIS 0x13,5
0000b2 cffe      	RJMP _0x35
                 ; 0000 004B           return 8;
0000b3 e0e8      	LDI  R30,LOW(8)
0000b4 9508      	RET
                 ; 0000 004C           break;
0000b5 c006      	RJMP _0x2B
                 ; 0000 004D 
                 ; 0000 004E           case 0b10111101 :
                 _0x34:
0000b6 3bed      	CPI  R30,LOW(0xBD)
0000b7 f421      	BRNE _0x2B
                 ; 0000 004F           while(PINC.6 == 0);  // While the button is pressed, Wait!
                 _0x39:
0000b8 9b9e      	SBIS 0x13,6
0000b9 cffe      	RJMP _0x39
                 ; 0000 0050           return 0;
0000ba e0e0      	LDI  R30,LOW(0)
0000bb 9508      	RET
                 ; 0000 0051           break;
                 ; 0000 0052           }
                 _0x2B:
                 ; 0000 0053 
                 ; 0000 0054    PORTC.0 = 1; //C2 is on, C0 and C1 are off
0000bc 9aa8      	SBI  0x15,0
                 ; 0000 0055    PORTC.1 = 1;
0000bd 9aa9      	SBI  0x15,1
                 ; 0000 0056    PORTC.2 = 0;
0000be 98aa      	CBI  0x15,2
                 ; 0000 0057 
                 ; 0000 0058    switch (PINC)
0000bf b3e3      	IN   R30,0x13
                 ; 0000 0059           {
                 ; 0000 005A           case 0b11110011 :
0000c0 3fe3      	CPI  R30,LOW(0xF3)
0000c1 f429      	BRNE _0x45
                 ; 0000 005B           while(PINC.3 == 0);  // While the button is pressed, Wait!
                 _0x46:
0000c2 9b9b      	SBIS 0x13,3
0000c3 cffe      	RJMP _0x46
                 ; 0000 005C           return 3;
0000c4 e0e3      	LDI  R30,LOW(3)
0000c5 9508      	RET
                 ; 0000 005D           break;
0000c6 c014      	RJMP _0x44
                 ; 0000 005E 
                 ; 0000 005F           case 0b11101011 :
                 _0x45:
0000c7 3eeb      	CPI  R30,LOW(0xEB)
0000c8 f429      	BRNE _0x49
                 ; 0000 0060           while(PINC.4 == 0);  // While the button is pressed, Wait!
                 _0x4A:
0000c9 9b9c      	SBIS 0x13,4
0000ca cffe      	RJMP _0x4A
                 ; 0000 0061           return 6;
0000cb e0e6      	LDI  R30,LOW(6)
0000cc 9508      	RET
                 ; 0000 0062           break;
0000cd c00d      	RJMP _0x44
                 ; 0000 0063 
                 ; 0000 0064           case 0b11011011 :
                 _0x49:
0000ce 3deb      	CPI  R30,LOW(0xDB)
0000cf f429      	BRNE _0x4D
                 ; 0000 0065           while(PINC.5 == 0);  // While the button is pressed, Wait!
                 _0x4E:
0000d0 9b9d      	SBIS 0x13,5
0000d1 cffe      	RJMP _0x4E
                 ; 0000 0066           return 9;
0000d2 e0e9      	LDI  R30,LOW(9)
0000d3 9508      	RET
                 ; 0000 0067           break;
0000d4 c006      	RJMP _0x44
                 ; 0000 0068 
                 ; 0000 0069           case 0b10111011 :
                 _0x4D:
0000d5 3beb      	CPI  R30,LOW(0xBB)
0000d6 f421      	BRNE _0x44
                 ; 0000 006A           while(PINC.6 == 0);  // While the button is pressed, Wait!
                 _0x52:
0000d7 9b9e      	SBIS 0x13,6
0000d8 cffe      	RJMP _0x52
                 ; 0000 006B           return '#';
0000d9 e2e3      	LDI  R30,LOW(35)
0000da 9508      	RET
                 ; 0000 006C           break;
                 ; 0000 006D           }
                 _0x44:
                 ; 0000 006E 
                 ; 0000 006F   }
0000db cfa2      	RJMP _0x7
                 ; 0000 0070 
                 ; 0000 0071 }
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0000dc 931a      	ST   -Y,R17
0000dd 2f1a      	MOV  R17,R26
0000de b3eb      	IN   R30,0x1B
0000df 70ef      	ANDI R30,LOW(0xF)
0000e0 2fae      	MOV  R26,R30
0000e1 2fe1      	MOV  R30,R17
0000e2 7fe0      	ANDI R30,LOW(0xF0)
0000e3 2bea      	OR   R30,R26
0000e4 bbeb      	OUT  0x1B,R30
                +
0000e5 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0000e6 958a     +DEC R24
0000e7 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0000e8 9ada      	SBI  0x1B,2
                +
0000e9 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0000ea 958a     +DEC R24
0000eb f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0000ec 98da      	CBI  0x1B,2
                +
0000ed e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0000ee 958a     +DEC R24
0000ef f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0000f0 c065      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0000f1 93aa      	ST   -Y,R26
0000f2 81a8      	LD   R26,Y
0000f3 dfe8      	RCALL __lcd_write_nibble_G100
0000f4 81e8          ld    r30,y
0000f5 95e2          swap  r30
0000f6 83e8          st    y,r30
0000f7 81a8      	LD   R26,Y
0000f8 dfe3      	RCALL __lcd_write_nibble_G100
                +
0000f9 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
0000fa 958a     +DEC R24
0000fb f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
0000fc 9621      	ADIW R28,1
0000fd 9508      	RET
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0000fe 931a      	ST   -Y,R17
0000ff 930a      	ST   -Y,R16
000100 2f1a      	MOV  R17,R26
000101 810a      	LDD  R16,Y+2
000102 2fe1      	MOV  R30,R17
000103 e0f0      	LDI  R31,0
000104 5ae0      	SUBI R30,LOW(-__base_y_G100)
000105 4ffe      	SBCI R31,HIGH(-__base_y_G100)
000106 81e0      	LD   R30,Z
000107 0fe0      	ADD  R30,R16
000108 2fae      	MOV  R26,R30
000109 dfe7      	RCALL __lcd_write_data
00010a 2e50      	MOV  R5,R16
00010b 2e41      	MOV  R4,R17
00010c 8119      	LDD  R17,Y+1
00010d 8108      	LDD  R16,Y+0
00010e 9623      	ADIW R28,3
00010f 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000110 e0a2      	LDI  R26,LOW(2)
000111 d1b6      	RCALL SUBOPT_0x0
000112 e0ac      	LDI  R26,LOW(12)
000113 dfdd      	RCALL __lcd_write_data
000114 e0a1      	LDI  R26,LOW(1)
000115 d1b2      	RCALL SUBOPT_0x0
000116 e0e0      	LDI  R30,LOW(0)
000117 2e4e      	MOV  R4,R30
000118 2e5e      	MOV  R5,R30
000119 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
00011a 931a      	ST   -Y,R17
00011b 2f1a      	MOV  R17,R26
00011c 301a      	CPI  R17,10
00011d f011      	BREQ _0x2000005
00011e 1457      	CP   R5,R7
00011f f038      	BRLO _0x2000004
                 _0x2000005:
000120 e0e0      	LDI  R30,LOW(0)
000121 93ea      	ST   -Y,R30
000122 9443      	INC  R4
000123 2da4      	MOV  R26,R4
000124 dfd9      	RCALL _lcd_gotoxy
000125 301a      	CPI  R17,10
000126 f179      	BREQ _0x2080001
                 _0x2000004:
000127 9453      	INC  R5
000128 9ad8      	SBI  0x1B,0
000129 2fa1      	MOV  R26,R17
00012a dfc6      	RCALL __lcd_write_data
00012b 98d8      	CBI  0x1B,0
00012c c029      	RJMP _0x2080001
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00012d 931a      	ST   -Y,R17
00012e 2f1a      	MOV  R17,R26
00012f b3ea      	IN   R30,0x1A
000130 6fe0      	ORI  R30,LOW(0xF0)
000131 bbea      	OUT  0x1A,R30
000132 9ad2      	SBI  0x1A,2
000133 9ad0      	SBI  0x1A,0
000134 9ad1      	SBI  0x1A,1
000135 98da      	CBI  0x1B,2
000136 98d8      	CBI  0x1B,0
000137 98d9      	CBI  0x1B,1
000138 2e71      	MOV  R7,R17
000139 2fe1      	MOV  R30,R17
00013a 58e0      	SUBI R30,-LOW(128)
                +
00013b 93e0 0162+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
00013d 2fe1      	MOV  R30,R17
00013e 54e0      	SUBI R30,-LOW(192)
                +
00013f 93e0 0163+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000141 e1a4      	LDI  R26,LOW(20)
000142 e0b0      	LDI  R27,0
000143 d1cf      	RCALL _delay_ms
000144 d187      	RCALL SUBOPT_0x1
000145 d186      	RCALL SUBOPT_0x1
000146 d185      	RCALL SUBOPT_0x1
000147 e2a0      	LDI  R26,LOW(32)
000148 df93      	RCALL __lcd_write_nibble_G100
                +
000149 ec88     +LDI R24 , LOW ( 200 )
00014a e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00014b 9701     +SBIW R24 , 1
00014c f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00014d e2a8      	LDI  R26,LOW(40)
00014e dfa2      	RCALL __lcd_write_data
00014f e0a4      	LDI  R26,LOW(4)
000150 dfa0      	RCALL __lcd_write_data
000151 e8a5      	LDI  R26,LOW(133)
000152 df9e      	RCALL __lcd_write_data
000153 e0a6      	LDI  R26,LOW(6)
000154 df9c      	RCALL __lcd_write_data
000155 dfba      	RCALL _lcd_clear
                 _0x2080001:
000156 9119      	LD   R17,Y+
000157 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 __print_G101:
                 ; .FSTART __print_G101
000158 93ba      	ST   -Y,R27
000159 93aa      	ST   -Y,R26
00015a 9726      	SBIW R28,6
00015b d194      	RCALL __SAVELOCR6
00015c e010      	LDI  R17,0
00015d 85ac      	LDD  R26,Y+12
00015e 85bd      	LDD  R27,Y+12+1
00015f e0e0      	LDI  R30,LOW(0)
000160 e0f0      	LDI  R31,HIGH(0)
000161 93ed      	ST   X+,R30
000162 93fc      	ST   X,R31
                 _0x2020016:
000163 89ea      	LDD  R30,Y+18
000164 89fb      	LDD  R31,Y+18+1
000165 9631      	ADIW R30,1
000166 8bea      	STD  Y+18,R30
000167 8bfb      	STD  Y+18+1,R31
000168 9731      	SBIW R30,1
000169 91e4      	LPM  R30,Z
00016a 2f2e      	MOV  R18,R30
00016b 30e0      	CPI  R30,0
00016c f409      	BRNE PC+2
00016d c109      	RJMP _0x2020018
00016e 2fe1      	MOV  R30,R17
00016f 30e0      	CPI  R30,0
000170 f431      	BRNE _0x202001C
000171 3225      	CPI  R18,37
000172 f411      	BRNE _0x202001D
000173 e011      	LDI  R17,LOW(1)
000174 c001      	RJMP _0x202001E
                 _0x202001D:
000175 d15d      	RCALL SUBOPT_0x2
                 _0x202001E:
000176 c0ff      	RJMP _0x202001B
                 _0x202001C:
000177 30e1      	CPI  R30,LOW(0x1)
000178 f4a1      	BRNE _0x202001F
000179 3225      	CPI  R18,37
00017a f411      	BRNE _0x2020020
00017b d157      	RCALL SUBOPT_0x2
00017c c0f8      	RJMP _0x20200CC
                 _0x2020020:
00017d e012      	LDI  R17,LOW(2)
00017e e040      	LDI  R20,LOW(0)
00017f e000      	LDI  R16,LOW(0)
000180 322d      	CPI  R18,45
000181 f411      	BRNE _0x2020021
000182 e001      	LDI  R16,LOW(1)
000183 c0f2      	RJMP _0x202001B
                 _0x2020021:
000184 322b      	CPI  R18,43
000185 f411      	BRNE _0x2020022
000186 e24b      	LDI  R20,LOW(43)
000187 c0ee      	RJMP _0x202001B
                 _0x2020022:
000188 3220      	CPI  R18,32
000189 f411      	BRNE _0x2020023
00018a e240      	LDI  R20,LOW(32)
00018b c0ea      	RJMP _0x202001B
                 _0x2020023:
00018c c002      	RJMP _0x2020024
                 _0x202001F:
00018d 30e2      	CPI  R30,LOW(0x2)
00018e f439      	BRNE _0x2020025
                 _0x2020024:
00018f e050      	LDI  R21,LOW(0)
000190 e013      	LDI  R17,LOW(3)
000191 3320      	CPI  R18,48
000192 f411      	BRNE _0x2020026
000193 6800      	ORI  R16,LOW(128)
000194 c0e1      	RJMP _0x202001B
                 _0x2020026:
000195 c003      	RJMP _0x2020027
                 _0x2020025:
000196 30e3      	CPI  R30,LOW(0x3)
000197 f009      	BREQ PC+2
000198 c0dd      	RJMP _0x202001B
                 _0x2020027:
000199 3320      	CPI  R18,48
00019a f010      	BRLO _0x202002A
00019b 332a      	CPI  R18,58
00019c f008      	BRLO _0x202002B
                 _0x202002A:
00019d c007      	RJMP _0x2020029
                 _0x202002B:
00019e e0aa      	LDI  R26,LOW(10)
00019f 9f5a      	MUL  R21,R26
0001a0 2d50      	MOV  R21,R0
0001a1 2fe2      	MOV  R30,R18
0001a2 53e0      	SUBI R30,LOW(48)
0001a3 0f5e      	ADD  R21,R30
0001a4 c0d1      	RJMP _0x202001B
                 _0x2020029:
0001a5 2fe2      	MOV  R30,R18
0001a6 36e3      	CPI  R30,LOW(0x63)
0001a7 f439      	BRNE _0x202002F
0001a8 d131      	RCALL SUBOPT_0x3
0001a9 89e8      	LDD  R30,Y+16
0001aa 89f9      	LDD  R31,Y+16+1
0001ab 81a4      	LDD  R26,Z+4
0001ac 93aa      	ST   -Y,R26
0001ad d132      	RCALL SUBOPT_0x4
0001ae c0c6      	RJMP _0x2020030
                 _0x202002F:
0001af 37e3      	CPI  R30,LOW(0x73)
0001b0 f429      	BRNE _0x2020032
0001b1 d128      	RCALL SUBOPT_0x3
0001b2 d133      	RCALL SUBOPT_0x5
0001b3 d0fb      	RCALL _strlen
0001b4 2f1e      	MOV  R17,R30
0001b5 c007      	RJMP _0x2020033
                 _0x2020032:
0001b6 37e0      	CPI  R30,LOW(0x70)
0001b7 f449      	BRNE _0x2020035
0001b8 d121      	RCALL SUBOPT_0x3
0001b9 d12c      	RCALL SUBOPT_0x5
0001ba d100      	RCALL _strlenf
0001bb 2f1e      	MOV  R17,R30
0001bc 6008      	ORI  R16,LOW(8)
                 _0x2020033:
0001bd 6002      	ORI  R16,LOW(2)
0001be 770f      	ANDI R16,LOW(127)
0001bf e030      	LDI  R19,LOW(0)
0001c0 c038      	RJMP _0x2020036
                 _0x2020035:
0001c1 36e4      	CPI  R30,LOW(0x64)
0001c2 f011      	BREQ _0x2020039
0001c3 36e9      	CPI  R30,LOW(0x69)
0001c4 f411      	BRNE _0x202003A
                 _0x2020039:
0001c5 6004      	ORI  R16,LOW(4)
0001c6 c002      	RJMP _0x202003B
                 _0x202003A:
0001c7 37e5      	CPI  R30,LOW(0x75)
0001c8 f431      	BRNE _0x202003C
                 _0x202003B:
0001c9 e5e4      	LDI  R30,LOW(_tbl10_G101*2)
0001ca e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
0001cb 83ee      	STD  Y+6,R30
0001cc 83ff      	STD  Y+6+1,R31
0001cd e015      	LDI  R17,LOW(5)
0001ce c00c      	RJMP _0x202003D
                 _0x202003C:
0001cf 35e8      	CPI  R30,LOW(0x58)
0001d0 f411      	BRNE _0x202003F
0001d1 6008      	ORI  R16,LOW(8)
0001d2 c003      	RJMP _0x2020040
                 _0x202003F:
0001d3 37e8      	CPI  R30,LOW(0x78)
0001d4 f009      	BREQ PC+2
0001d5 c09f      	RJMP _0x2020071
                 _0x2020040:
0001d6 e5ee      	LDI  R30,LOW(_tbl16_G101*2)
0001d7 e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
0001d8 83ee      	STD  Y+6,R30
0001d9 83ff      	STD  Y+6+1,R31
0001da e014      	LDI  R17,LOW(4)
                 _0x202003D:
0001db ff02      	SBRS R16,2
0001dc c015      	RJMP _0x2020042
0001dd d0fc      	RCALL SUBOPT_0x3
0001de 89a8      	LDD  R26,Y+16
0001df 89b9      	LDD  R27,Y+16+1
0001e0 9614      	ADIW R26,4
0001e1 91ed      	LD   R30,X+
0001e2 91fd      	LD   R31,X+
0001e3 87ea      	STD  Y+10,R30
0001e4 87fb      	STD  Y+10+1,R31
0001e5 85ab      	LDD  R26,Y+11
0001e6 23aa      	TST  R26
0001e7 f422      	BRPL _0x2020043
0001e8 d119      	RCALL __ANEGW1
0001e9 87ea      	STD  Y+10,R30
0001ea 87fb      	STD  Y+10+1,R31
0001eb e24d      	LDI  R20,LOW(45)
                 _0x2020043:
0001ec 3040      	CPI  R20,0
0001ed f011      	BREQ _0x2020044
0001ee 5f1f      	SUBI R17,-LOW(1)
0001ef c001      	RJMP _0x2020045
                 _0x2020044:
0001f0 7f0b      	ANDI R16,LOW(251)
                 _0x2020045:
0001f1 c007      	RJMP _0x2020046
                 _0x2020042:
0001f2 d0e7      	RCALL SUBOPT_0x3
0001f3 89a8      	LDD  R26,Y+16
0001f4 89b9      	LDD  R27,Y+16+1
0001f5 9614      	ADIW R26,4
0001f6 d10f      	RCALL __GETW1P
0001f7 87ea      	STD  Y+10,R30
0001f8 87fb      	STD  Y+10+1,R31
                 _0x2020046:
                 _0x2020036:
0001f9 fd00      	SBRC R16,0
0001fa c010      	RJMP _0x2020047
                 _0x2020048:
0001fb 1715      	CP   R17,R21
0001fc f470      	BRSH _0x202004A
0001fd ff07      	SBRS R16,7
0001fe c008      	RJMP _0x202004B
0001ff ff02      	SBRS R16,2
000200 c004      	RJMP _0x202004C
000201 7f0b      	ANDI R16,LOW(251)
000202 2f24      	MOV  R18,R20
000203 5011      	SUBI R17,LOW(1)
000204 c001      	RJMP _0x202004D
                 _0x202004C:
000205 e320      	LDI  R18,LOW(48)
                 _0x202004D:
000206 c001      	RJMP _0x202004E
                 _0x202004B:
000207 e220      	LDI  R18,LOW(32)
                 _0x202004E:
000208 d0ca      	RCALL SUBOPT_0x2
000209 5051      	SUBI R21,LOW(1)
00020a cff0      	RJMP _0x2020048
                 _0x202004A:
                 _0x2020047:
00020b 2f31      	MOV  R19,R17
00020c ff01      	SBRS R16,1
00020d c016      	RJMP _0x202004F
                 _0x2020050:
00020e 3030      	CPI  R19,0
00020f f099      	BREQ _0x2020052
000210 ff03      	SBRS R16,3
000211 c006      	RJMP _0x2020053
000212 81ee      	LDD  R30,Y+6
000213 81ff      	LDD  R31,Y+6+1
000214 9125      	LPM  R18,Z+
000215 83ee      	STD  Y+6,R30
000216 83ff      	STD  Y+6+1,R31
000217 c005      	RJMP _0x2020054
                 _0x2020053:
000218 81ae      	LDD  R26,Y+6
000219 81bf      	LDD  R27,Y+6+1
00021a 912d      	LD   R18,X+
00021b 83ae      	STD  Y+6,R26
00021c 83bf      	STD  Y+6+1,R27
                 _0x2020054:
00021d d0b5      	RCALL SUBOPT_0x2
00021e 3050      	CPI  R21,0
00021f f009      	BREQ _0x2020055
000220 5051      	SUBI R21,LOW(1)
                 _0x2020055:
000221 5031      	SUBI R19,LOW(1)
000222 cfeb      	RJMP _0x2020050
                 _0x2020052:
000223 c048      	RJMP _0x2020056
                 _0x202004F:
                 _0x2020058:
000224 e320      	LDI  R18,LOW(48)
000225 81ee      	LDD  R30,Y+6
000226 81ff      	LDD  R31,Y+6+1
000227 d0e2      	RCALL __GETW1PF
000228 87e8      	STD  Y+8,R30
000229 87f9      	STD  Y+8+1,R31
00022a 81ee      	LDD  R30,Y+6
00022b 81ff      	LDD  R31,Y+6+1
00022c 9632      	ADIW R30,2
00022d 83ee      	STD  Y+6,R30
00022e 83ff      	STD  Y+6+1,R31
                 _0x202005A:
00022f 85e8      	LDD  R30,Y+8
000230 85f9      	LDD  R31,Y+8+1
000231 85aa      	LDD  R26,Y+10
000232 85bb      	LDD  R27,Y+10+1
000233 17ae      	CP   R26,R30
000234 07bf      	CPC  R27,R31
000235 f050      	BRLO _0x202005C
000236 5f2f      	SUBI R18,-LOW(1)
000237 85a8      	LDD  R26,Y+8
000238 85b9      	LDD  R27,Y+8+1
000239 85ea      	LDD  R30,Y+10
00023a 85fb      	LDD  R31,Y+10+1
00023b 1bea      	SUB  R30,R26
00023c 0bfb      	SBC  R31,R27
00023d 87ea      	STD  Y+10,R30
00023e 87fb      	STD  Y+10+1,R31
00023f cfef      	RJMP _0x202005A
                 _0x202005C:
000240 332a      	CPI  R18,58
000241 f028      	BRLO _0x202005D
000242 ff03      	SBRS R16,3
000243 c002      	RJMP _0x202005E
000244 5f29      	SUBI R18,-LOW(7)
000245 c001      	RJMP _0x202005F
                 _0x202005E:
000246 5d29      	SUBI R18,-LOW(39)
                 _0x202005F:
                 _0x202005D:
000247 fd04      	SBRC R16,4
000248 c019      	RJMP _0x2020061
000249 3321      	CPI  R18,49
00024a f420      	BRSH _0x2020063
00024b 85a8      	LDD  R26,Y+8
00024c 85b9      	LDD  R27,Y+8+1
00024d 9711      	SBIW R26,1
00024e f409      	BRNE _0x2020062
                 _0x2020063:
00024f c009      	RJMP _0x20200CD
                 _0x2020062:
000250 1753      	CP   R21,R19
000251 f010      	BRLO _0x2020067
000252 ff00      	SBRS R16,0
000253 c001      	RJMP _0x2020068
                 _0x2020067:
000254 c011      	RJMP _0x2020066
                 _0x2020068:
000255 e220      	LDI  R18,LOW(32)
000256 ff07      	SBRS R16,7
000257 c00a      	RJMP _0x2020069
000258 e320      	LDI  R18,LOW(48)
                 _0x20200CD:
000259 6100      	ORI  R16,LOW(16)
00025a ff02      	SBRS R16,2
00025b c006      	RJMP _0x202006A
00025c 7f0b      	ANDI R16,LOW(251)
00025d 934a      	ST   -Y,R20
00025e d081      	RCALL SUBOPT_0x4
00025f 3050      	CPI  R21,0
000260 f009      	BREQ _0x202006B
000261 5051      	SUBI R21,LOW(1)
                 _0x202006B:
                 _0x202006A:
                 _0x2020069:
                 _0x2020061:
000262 d070      	RCALL SUBOPT_0x2
000263 3050      	CPI  R21,0
000264 f009      	BREQ _0x202006C
000265 5051      	SUBI R21,LOW(1)
                 _0x202006C:
                 _0x2020066:
000266 5031      	SUBI R19,LOW(1)
000267 85a8      	LDD  R26,Y+8
000268 85b9      	LDD  R27,Y+8+1
000269 9712      	SBIW R26,2
00026a f008      	BRLO _0x2020059
00026b cfb8      	RJMP _0x2020058
                 _0x2020059:
                 _0x2020056:
00026c ff00      	SBRS R16,0
00026d c007      	RJMP _0x202006D
                 _0x202006E:
00026e 3050      	CPI  R21,0
00026f f029      	BREQ _0x2020070
000270 5051      	SUBI R21,LOW(1)
000271 e2e0      	LDI  R30,LOW(32)
000272 93ea      	ST   -Y,R30
000273 d06c      	RCALL SUBOPT_0x4
000274 cff9      	RJMP _0x202006E
                 _0x2020070:
                 _0x202006D:
                 _0x2020071:
                 _0x2020030:
                 _0x20200CC:
000275 e010      	LDI  R17,LOW(0)
                 _0x202001B:
000276 ceec      	RJMP _0x2020016
                 _0x2020018:
000277 85ac      	LDD  R26,Y+12
000278 85bd      	LDD  R27,Y+12+1
000279 91ed      	LD   R30,X+
00027a 91fd      	LD   R31,X+
00027b d07b      	RCALL __LOADLOCR6
00027c 9664      	ADIW R28,20
00027d 9508      	RET
                 ; .FEND
                 _put_lcd_G101:
                 ; .FSTART _put_lcd_G101
00027e d073      	RCALL __SAVELOCR4
00027f 018d      	MOVW R16,R26
000280 813c      	LDD  R19,Y+4
000281 2fa3      	MOV  R26,R19
000282 de97      	RCALL _lcd_putchar
000283 01d8      	MOVW R26,R16
000284 91ed      	LD   R30,X+
000285 91fd      	LD   R31,X+
000286 9631      	ADIW R30,1
000287 93fe      	ST   -X,R31
000288 93ee      	ST   -X,R30
000289 d06f      	RCALL __LOADLOCR4
00028a 9625      	ADIW R28,5
00028b 9508      	RET
                 ; .FEND
                 _lcd_printf:
                 ; .FSTART _lcd_printf
00028c 92ff      	PUSH R15
00028d 2ef8      	MOV  R15,R24
00028e 9726      	SBIW R28,6
00028f 931a      	ST   -Y,R17
000290 930a      	ST   -Y,R16
000291 01de      	MOVW R26,R28
000292 9614      	ADIW R26,4
000293 d06a      	RCALL __ADDW2R15
000294 018d      	MOVW R16,R26
000295 e0e0      	LDI  R30,LOW(0)
000296 83ec      	STD  Y+4,R30
000297 83ed      	STD  Y+4+1,R30
000298 83ee      	STD  Y+6,R30
000299 83ef      	STD  Y+6+1,R30
00029a 01de      	MOVW R26,R28
00029b 9618      	ADIW R26,8
00029c d061      	RCALL __ADDW2R15
00029d 91ed      	LD   R30,X+
00029e 91fd      	LD   R31,X+
00029f 93fa      	ST   -Y,R31
0002a0 93ea      	ST   -Y,R30
0002a1 931a      	ST   -Y,R17
0002a2 930a      	ST   -Y,R16
0002a3 e7ee      	LDI  R30,LOW(_put_lcd_G101)
0002a4 e0f2      	LDI  R31,HIGH(_put_lcd_G101)
0002a5 93fa      	ST   -Y,R31
0002a6 93ea      	ST   -Y,R30
0002a7 01de      	MOVW R26,R28
0002a8 9618      	ADIW R26,8
0002a9 deae      	RCALL __print_G101
0002aa 8119      	LDD  R17,Y+1
0002ab 8108      	LDD  R16,Y+0
0002ac 9628      	ADIW R28,8
0002ad 90ff      	POP  R15
0002ae 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
0002af 93ba      	ST   -Y,R27
0002b0 93aa      	ST   -Y,R26
0002b1 91a9          ld   r26,y+
0002b2 91b9          ld   r27,y+
0002b3 27ee          clr  r30
0002b4 27ff          clr  r31
                 strlen0:
0002b5 916d          ld   r22,x+
0002b6 2366          tst  r22
0002b7 f011          breq strlen1
0002b8 9631          adiw r30,1
0002b9 cffb          rjmp strlen0
                 strlen1:
0002ba 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
0002bb 93ba      	ST   -Y,R27
0002bc 93aa      	ST   -Y,R26
0002bd 27aa          clr  r26
0002be 27bb          clr  r27
0002bf 91e9          ld   r30,y+
0002c0 91f9          ld   r31,y+
                 strlenf0:
0002c1 9005      	lpm  r0,z+
0002c2 2000          tst  r0
0002c3 f011          breq strlenf1
0002c4 9611          adiw r26,1
0002c5 cffb          rjmp strlenf0
                 strlenf1:
0002c6 01fd          movw r30,r26
0002c7 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 __base_y_G100:
000160           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
0002c8 de28      	RCALL __lcd_write_data
0002c9 e0a3      	LDI  R26,LOW(3)
0002ca e0b0      	LDI  R27,0
0002cb c047      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x1:
0002cc e3a0      	LDI  R26,LOW(48)
0002cd de0e      	RCALL __lcd_write_nibble_G100
                +
0002ce ec88     +LDI R24 , LOW ( 200 )
0002cf e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0002d0 9701     +SBIW R24 , 1
0002d1 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0002d2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x2:
0002d3 932a      	ST   -Y,R18
0002d4 85ad      	LDD  R26,Y+13
0002d5 85be      	LDD  R27,Y+13+1
0002d6 85ef      	LDD  R30,Y+15
0002d7 89f8      	LDD  R31,Y+15+1
0002d8 9509      	ICALL
0002d9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0x3:
0002da 89e8      	LDD  R30,Y+16
0002db 89f9      	LDD  R31,Y+16+1
0002dc 9734      	SBIW R30,4
0002dd 8be8      	STD  Y+16,R30
0002de 8bf9      	STD  Y+16+1,R31
0002df 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x4:
0002e0 85ad      	LDD  R26,Y+13
0002e1 85be      	LDD  R27,Y+13+1
0002e2 85ef      	LDD  R30,Y+15
0002e3 89f8      	LDD  R31,Y+15+1
0002e4 9509      	ICALL
0002e5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x5:
0002e6 89a8      	LDD  R26,Y+16
0002e7 89b9      	LDD  R27,Y+16+1
0002e8 9614      	ADIW R26,4
0002e9 91ed      	LD   R30,X+
0002ea 91fd      	LD   R31,X+
0002eb 83ee      	STD  Y+6,R30
0002ec 83ff      	STD  Y+6+1,R31
0002ed 81ae      	LDD  R26,Y+6
0002ee 81bf      	LDD  R27,Y+6+1
0002ef 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
0002f0 935a      	ST   -Y,R21
                 __SAVELOCR5:
0002f1 934a      	ST   -Y,R20
                 __SAVELOCR4:
0002f2 933a      	ST   -Y,R19
                 __SAVELOCR3:
0002f3 932a      	ST   -Y,R18
                 __SAVELOCR2:
0002f4 931a      	ST   -Y,R17
0002f5 930a      	ST   -Y,R16
0002f6 9508      	RET
                 
                 __LOADLOCR6:
0002f7 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0002f8 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0002f9 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0002fa 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0002fb 8119      	LDD  R17,Y+1
0002fc 8108      	LD   R16,Y
0002fd 9508      	RET
                 
                 __ADDW2R15:
0002fe 2400      	CLR  R0
0002ff 0daf      	ADD  R26,R15
000300 1db0      	ADC  R27,R0
000301 9508      	RET
                 
                 __ANEGW1:
000302 95f1      	NEG  R31
000303 95e1      	NEG  R30
000304 40f0      	SBCI R31,0
000305 9508      	RET
                 
                 __GETW1P:
000306 91ed      	LD   R30,X+
000307 91fc      	LD   R31,X
000308 9711      	SBIW R26,1
000309 9508      	RET
                 
                 __GETW1PF:
00030a 9005      	LPM  R0,Z+
00030b 91f4      	LPM  R31,Z
00030c 2de0      	MOV  R30,R0
00030d 9508      	RET
                 
                 __PUTPARD1:
00030e 937a      	ST   -Y,R23
00030f 936a      	ST   -Y,R22
000310 93fa      	ST   -Y,R31
000311 93ea      	ST   -Y,R30
000312 9508      	RET
                 
                 _delay_ms:
000313 9610      	adiw r26,0
000314 f039      	breq __delay_ms1
                 __delay_ms0:
000315 95a8      	wdr
                +
000316 ed80     +LDI R24 , LOW ( 0x7D0 )
000317 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000318 9701     +SBIW R24 , 1
000319 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00031a 9711      	sbiw r26,1
00031b f7c9      	brne __delay_ms0
                 __delay_ms1:
00031c 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  11 r1 :   1 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   0 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   4 
r16:  37 r17:  41 r18:  27 r19:  10 r20:   9 r21:  17 r22:   6 r23:   2 
r24:  23 r25:   5 r26:  75 r27:  26 r28:  12 r29:   1 r30: 157 r31:  52 
x  :  21 y  : 135 z  :  14 
Registers used: 25 out of 35 (71.4%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   3 
adiw  :  18 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  15 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   7 
brlt  :   0 brmi  :   0 brne  :  40 brpl  :   1 brsh  :   2 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   0 
cbi   :   8 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  10 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   4 cpc   :   1 cpi   :  43 cpse  :   0 dec   :   5 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   5 inc   :   2 jmp   :  22 ld    :  24 ldd   :  59 ldi   :  88 
lds   :   0 lpm   :  14 lsl   :   0 lsr   :   0 mov   :  31 movw  :  10 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   7 out   :  10 pop   :   1 push  :   1 rcall :  52 ret   :  34 
reti  :   0 rjmp  :  77 rol   :   0 ror   :   0 sbc   :   1 sbci  :   2 
sbi   :  11 sbic  :   0 sbis  :  12 sbiw  :  14 sbr   :   0 sbrc  :   2 
sbrs  :  10 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  45 std   :  30 sts   :   2 sub   :   1 subi  :  16 swap  :   1 
tst   :   3 wdr   :   1 
Instructions used: 51 out of 116 (44.0%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00063a   1562     32   1594   16384   9.7%
[.dseg] 0x000060 0x000164      0      4      4    1024   0.4%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 4 warnings
